#version 460

#extension GL_EXT_debug_printf : enable

#define TO_INDEX(a, b, c) (int(a + gridSize.x * (b + gridSize.y * c)))
#define TO_INDEX_BOUNDARY(a, b, c) (int(a + (gridSize.x + 2) * (b + (gridSize.y + 2) * c)))

#define VEC_TO_INDEX(a) (TO_INDEX(a.x, a.y, a.z))
#define VEC_TO_INDEX_BOUNDARY(a) (TO_INDEX_BOUNDARY(a.x, a.y, a.z))

#define TAG_CELL_TYPE_BIT 0
#define TAG_IS_INTERFACE_BIT 1

#define CELL_TYPE_FLUID 1
#define CELL_TYPE_AIR 0

#define IS_INTERFACE 1
#define IS_NOT_INTERFACE 0

struct CellInfo {
  uint tags;
  int indexes;
};

layout(push_constant) uniform GridInfo {
  ivec4 gridSize;
  vec4 gridOrigin;
  float cellSize;
  uint particleCount;
};

struct ParticleRecord {
  vec4 position;
  vec4 velocity;
  vec4 previousVelocity;
  vec4 massDensityCenter;
  vec4 force;
  float massDensity;
  float pressure;
  float temperature;
  int gridID;
  float pressureForceLength;
  float surfaceArea;
  float weightingKernelFraction;
  float weight;
};

struct KeyValue {
  int key;  //Particle ID
  int value;//Cell ID
};

layout(std430, binding = 0) buffer Indexes { CellInfo cellInfos[]; };
layout(std430, binding = 2) buffer GridSPH { KeyValue gridSPH[]; };
layout(std430, binding = 1) buffer PositionBuffer { ParticleRecord particleRecords[]; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

bvec3 hasMinExtreme(const ivec3 myGridID3D) { return lessThan(myGridID3D, vec3(0)); }

bvec3 hasMaxExtreme(const ivec3 myGridID3D) { return greaterThanEqual(myGridID3D, gridSize.xyz); }
bool isOnEdge(const ivec3 myGridID3D) {
  return any(hasMinExtreme(myGridID3D)) || any(hasMaxExtreme(myGridID3D));
}

uint cellCount = gridSize.x * gridSize.y * gridSize.z;
int neighbours[] = {-VEC_TO_INDEX(vec3(1, 0, 0)), VEC_TO_INDEX(vec3(1, 0, 0)),
                    -VEC_TO_INDEX(vec3(0, 1, 0)), VEC_TO_INDEX(vec3(0, 1, 0)),
                    -VEC_TO_INDEX(vec3(0, 0, 1)), VEC_TO_INDEX(vec3(0, 0, 1))};
ivec3 neighbours3D[] = {-(ivec3(1, 0, 0)), (ivec3(1, 0, 0)),  -(ivec3(0, 1, 0)),
                        (ivec3(0, 1, 0)),  -(ivec3(0, 0, 1)), (ivec3(0, 0, 1))};
bool neighboursEmpty[] = {
    true, true, true, true, true, true,
};
void main() {
  const uint myId = gl_GlobalInvocationID.x;
  const uint myIndex = cellInfos[myId].indexes;
  bool isEmpty = true;
  if (myId < cellCount) {

    if (myIndex == -1){
      isEmpty = true;
      cellInfos[myId].tags =
          bitfieldInsert(cellInfos[myId].tags, CELL_TYPE_AIR, TAG_CELL_TYPE_BIT, 1);
    }
    else {
      uint sortedID = myIndex;
      int currentGridID = int(myId);
      while (gridSPH[sortedID].value == currentGridID && sortedID < particleCount) {
        if(myId == 0)
              debugPrintfEXT("myId: %d, sortedID: %d, ", myId, sortedID );
        if (particleRecords[sortedID].weight > 0) {
          isEmpty = false;
          break;
        }
        ++sortedID;
      }
      if (isEmpty) {
        cellInfos[myId].tags =
            bitfieldInsert(cellInfos[myId].tags, CELL_TYPE_AIR, TAG_CELL_TYPE_BIT, 1);
      } else {
        cellInfos[myId].tags =
            bitfieldInsert(cellInfos[myId].tags, CELL_TYPE_FLUID, TAG_CELL_TYPE_BIT, 1);
      }

      uint myGridID = myId;
      uint myGridIDxy =
          myGridID - ((myGridID / (gridSize.x * gridSize.y)) * gridSize.x * gridSize.y);
      ivec3 myGridID3D = ivec3(myGridIDxy % gridSize.x, myGridIDxy / gridSize.x,
                               myGridID / (gridSize.x * gridSize.y));

      for (int i = 0; i < 6; ++i) {

        int sortedID = cellInfos[myId + neighbours[i]].indexes;
        int currentGridID = int(myId) + neighbours[i];
        while (gridSPH[sortedID].value == currentGridID && sortedID < particleCount) {
          if (particleRecords[sortedID].weight > 0) {
            neighboursEmpty[i] = false;
            break;
          }
          ++sortedID;
        }
      }

      bool isInterface = false;

      for (int i = 0; i < 6; ++i) {
        if (isOnEdge(myGridID3D + neighbours3D[i])) { continue; }
        isInterface = isInterface
            || (isEmpty && !neighboursEmpty[i])
            || (!isEmpty && neighboursEmpty[i]);

        if (isInterface)
          cellInfos[myId].tags =
              bitfieldInsert(cellInfos[myId].tags, IS_INTERFACE, TAG_IS_INTERFACE_BIT, 1);
        else
          cellInfos[myId].tags =
              bitfieldInsert(cellInfos[myId].tags, IS_NOT_INTERFACE, TAG_IS_INTERFACE_BIT, 1);
      }
    }
  }
}
