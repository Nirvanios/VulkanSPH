#version 450

#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_atomic_float : enable

#define TO_INDEX(a, b, c)                                                                          \
  (int(a + simulationInfoGrid.gridSize.x * (b + simulationInfoGrid.gridSize.y * c)))
#define TO_INDEX_BOUNDARY(a, b, c)                                                                 \
  (int(a + (simulationInfoGrid.gridSize.x + 2) * (b + (simulationInfoGrid.gridSize.y + 2) * c)))

#define VEC_TO_INDEX(a) (TO_INDEX(a.x, a.y, a.z))
#define VEC_TO_INDEX_BOUNDARY(a) (TO_INDEX_BOUNDARY(a.x, a.y, a.z))

#define TAG_CELL_TYPE_BIT 0
#define TAG_IS_INTERFACE_BIT 1

#define CELL_TYPE_FLUID 1
#define CELL_TYPE_AIR 0

#define IS_INTERFACE 1
#define IS_NOT_INTERFACE 0

struct CellInfo {
  uint tags;
  int indexes;
};

struct ParticleRecord {
  vec4 position;
  vec4 velocity;
  vec4 previousVelocity;
  vec4 massDensityCenter;
  vec4 force;
  float massDensity;
  float pressure;
  float temperature;
  int gridID;
  float pressureForceLength;
  float surfaceArea;
  float weightingKernelFraction;
  float weight;
};

struct KeyValue {
  int key;  //Particle ID
  int value;//Cell ID
};

struct SimulationInfoGrid {
  ivec4 gridSize;
  vec4 gridOrigin;
  float timeStep;
  int cellCount;
  float cellSize;
  float diffusionCoefficient;
  int boundaryScale;
  uint specificInfo;
  float heatConductivity;
  float heatCapacity;
  float specificGasConstant;
};

struct SimulationInfoSPH {
  ivec4 gridSizeXYZcountW;
  vec4 GridOrigin;
  vec4 gravityForce;
  float particleMass;
  float restDensity;
  float viscosityCoefficient;
  float gasStiffnessConstant;
  float heatConductivity;
  float heatCapacity;
  float timeStep;
  float supportRadius;
  float tensionThreshold;
  float tensionCoefficient;
  uint particleCount;
};

layout(binding = 4) uniform SimulationInfo {
  SimulationInfoSPH simulationInfoSPH;
  SimulationInfoGrid simulationInfoGrid;
};

layout(std430, binding = 0) buffer Indexes { CellInfo cellInfos[]; };
layout(std430, binding = 1) buffer PositionBuffer { ParticleRecord particleRecords[]; };
layout(std430, binding = 2) buffer GridVelocities { vec4 gridVelocities[]; };
layout(std430, binding = 3) buffer GridNew { vec2 gridDensityHeatBuffer[]; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

int neighboursBoundary[] = {
    -VEC_TO_INDEX_BOUNDARY(vec3(1, 0, 0)), VEC_TO_INDEX_BOUNDARY(vec3(1, 0, 0)),
    -VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0)), VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0)),
    -VEC_TO_INDEX_BOUNDARY(vec3(0, 0, 1)), VEC_TO_INDEX_BOUNDARY(vec3(0, 0, 1))};
int neighbours[] = {-VEC_TO_INDEX(vec3(1, 0, 0)), VEC_TO_INDEX(vec3(1, 0, 0)),
                    -VEC_TO_INDEX(vec3(0, 1, 0)), VEC_TO_INDEX(vec3(0, 1, 0)),
                    -VEC_TO_INDEX(vec3(0, 0, 1)), VEC_TO_INDEX(vec3(0, 0, 1))};
const ivec3 neighbours3D[] = {-(ivec3(1, 0, 0)), (ivec3(1, 0, 0)),  -(ivec3(0, 1, 0)),
                              (ivec3(0, 1, 0)),  -(ivec3(0, 0, 1)), (ivec3(0, 0, 1))};
float neighboursMassChange[6] = {0, 0, 0, 0, 0, 0};
bool evaporateInto[6] = {false, false, false, false, false, false};

float coefficientA = 0.001;
float coefficientB = 0.0;

void main() {
  uint myId = gl_GlobalInvocationID.x;
  if (myId < simulationInfoSPH.particleCount) {
    const uint myGridID = particleRecords[myId].gridID;

    const ivec3 gridSizeWithBorders = simulationInfoGrid.gridSize.xyz + ivec3(2);
    const ivec3 myId3DGrid =
        ivec3(myGridID % simulationInfoGrid.gridSize.x,
              int(myGridID % (simulationInfoGrid.gridSize.x * simulationInfoGrid.gridSize.y)
                  / simulationInfoGrid.gridSize.x),
              int(myGridID / (simulationInfoGrid.gridSize.x * simulationInfoGrid.gridSize.y)));
    const uint myIdGrid = (myId3DGrid.x + 1) + (myId3DGrid.y + 1) * gridSizeWithBorders.x
        + (myId3DGrid.z + 1) * gridSizeWithBorders.x * gridSizeWithBorders.y;

    const bool isInterface =
        bool(bitfieldExtract(cellInfos[myGridID].tags, TAG_IS_INTERFACE_BIT, 1));

    int cellDistributionCount = 0;

    if (isInterface && particleRecords[myId].weight > 0) {
      float neighboursMassChangeSum = 0.0f;
      for (int i = 0; i < 6; ++i) {
        uint currentGridID = myGridID + neighbours[i];
        uint currentGridBoundaryID = myIdGrid + neighboursBoundary[i];
        const uint neighbourType =
            bitfieldExtract(cellInfos[currentGridID].tags, TAG_CELL_TYPE_BIT, 1);
        if (neighbourType == CELL_TYPE_AIR) evaporateInto[i] = true;
        float vaporPressure = simulationInfoGrid.specificGasConstant
            * (gridDensityHeatBuffer[currentGridBoundaryID].y - 273.15);
        float saturationVaporPressure = 611.2
            * exp(((17.62 * particleRecords[myId].temperature)
                   / (243.12 + particleRecords[myId].temperature)));
        neighboursMassChange[i] =
            max(particleRecords[myId].surfaceArea
                    * (coefficientA
                       + coefficientB * length(gridVelocities[currentGridBoundaryID].xyz))
                           * (saturationVaporPressure - vaporPressure),
                0.0f)
            * simulationInfoSPH.timeStep;
        //if (particleRecords[myId].surfaceArea <= 0)
          //debugPrintfEXT("myId: %d, B: %f", myId, coefficientB * length(gridVelocities[currentGridBoundaryID].xyz));
          debugPrintfEXT("myId: %d, surf %e", myId, particleRecords[myId].surfaceArea);
        neighboursMassChangeSum += neighboursMassChange[i];
        ++cellDistributionCount;
      }
      
      float weightedParicleMass = simulationInfoSPH.particleMass * particleRecords[myId].weight;
      float newWeight = particleRecords[myId].weight * ((weightedParicleMass - neighboursMassChangeSum) / weightedParicleMass);
      float massRebalance = 0.0;
      if(newWeight < 1e-6){
        massRebalance = (simulationInfoSPH.particleMass * newWeight) / cellDistributionCount;
        newWeight = 0.0;
      }

      float evaporationWeight = min((weightedParicleMass) / neighboursMassChangeSum, 1.0f);
      neighboursMassChangeSum = 0.0;
      for (int i = 0; i < 6; ++i) {
        neighboursMassChange[i] *= evaporationWeight;
        if (evaporateInto[i]) {
          atomicAdd(gridDensityHeatBuffer[myIdGrid + neighboursBoundary[i]].x,
                    neighboursMassChange[i] + massRebalance);

          /*           debugPrintfEXT("Adding to %d (%d + %d) value %f", myIdGrid + neighboursBoundary[i],
                         myIdGrid, neighboursBoundary[i], neighboursMassChange[i]); */
          neighboursMassChangeSum += neighboursMassChange[i];
        }
      }

      debugPrintfEXT("myId: %d, weightedParicleMass: %e, neighboursMassChangeSum: %e", myId,
                     weightedParicleMass, neighboursMassChangeSum);

            particleRecords[myId].weight = newWeight;

          /* debugPrintfEXT("myId: %d, newWeight: %e", myId, particleRecords[myId].weight); */
    }
  }
}
