float M_PI = 3.1415;

float defaultKernel(in vec4 position, in float positionNorm, in float supportRadius){
    return 315/(64 * M_PI * pow(supportRadius, 9)) * pow(pow(supportRadius, 2) - pow(positionNorm, 2), 3) * int(positionNorm > supportRadius);
}
vec4 gradientKernel(in vec4 position, in float positionNorm, in float supportRadius){
    return -945/(32 * M_PI * pow(supportRadius, 9)) * position * pow(pow(supportRadius, 2) - pow(positionNorm, 2), 2);
}
float laplacianKernel(in vec4 position, in float positionNorm, in float supportRadius){
    return -945/(32 * M_PI * pow(supportRadius, 9)) * (pow(supportRadius, 2) - pow(positionNorm, 2)) * (3 * pow(supportRadius, 2) - 7 * pow(positionNorm, 2));
}