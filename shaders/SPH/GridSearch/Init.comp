#version 460

#extension GL_EXT_debug_printf : enable

layout(push_constant) uniform GridInfo {
  ivec4 gridSize;
  vec4 gridOrigin;
  float cellSize;
  uint particleCount;
};

struct KeyValue {
  int key;  //Particle ID
  int value;//Cell ID
};

layout(std430, binding = 0) buffer Grid { KeyValue grid[]; };

struct ParticleRecord {
  vec4 position;
  vec4 velocity;
  vec4 previousVelocity;
  vec4 massDensityCenter;
  float massDensity;
  float pressure;
  float temperature;
  int gridID;
  float pressureForceLength;
  float surfaceArea;
  float weightingKernelFraction;
};

layout(std430, binding = 1) buffer positionBuffer { ParticleRecord particleRecords[]; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
  const uint myId = gl_GlobalInvocationID.x;
  if (myId < particleCount) {
    vec4 relativePosition = particleRecords[myId].position - gridOrigin;
    //if (myId == 1) debugPrintfEXT("rPos: %v4f", relativePosition);
    ivec3 gridIndex3D = ivec3(floor(relativePosition.xyz / cellSize));
    int gridIndexFlatten =
        gridIndex3D.x + gridSize.x * (gridIndex3D.y + gridSize.y * gridIndex3D.z);
    //if (myId == 6) debugPrintfEXT("grid3d: %f", cellSize);
    grid[myId].key = int(myId);
    grid[myId].value = gridIndexFlatten;
    particleRecords[myId].gridID = gridIndexFlatten;
    //if (gridIndexFlatten < 0) debugPrintfEXT("!!!!%d!!!! %v4d", gridIndexFlatten, gridIndex3D);
  }
}
