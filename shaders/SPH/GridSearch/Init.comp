#version 460

layout(binding = 0) uniform GridInfo{
    ivec4 gridSize;
    vec4 gridOrigin;
    float cellSize;
    uint particleCount;
};

struct KeyValue{
    int key;    //Particle ID
    int value;  //Cell ID
};

layout(std430, binding = 1) buffer Grid{
    KeyValue grid[];
};

struct ParticleRecord {
    vec4 position;
    vec4 velocity;
    vec4 currentVelocity;
    float massDensity;
    float pressure;
    int gridID;
    float dummy;
};


layout(std430, binding = 2) buffer positionBuffer{
    ParticleRecord particleRecords[];
};

void main() {
    const uint myId = gl_GlobalInvocationID.x;
    if(myId < particleCount){
        vec4 relativePosition = particleRecords[myId].position - gridOrigin;
        ivec3 gridIndex3D = ivec3(floor(relativePosition.xyz / cellSize));
        int gridIndexFlatten = gridIndex3D.x + gridSize.x * (gridIndex3D.y + gridSize.z * gridIndex3D.z);
        grid[myId].key = int(myId);
        grid[myId].value = gridIndexFlatten;
        particleRecords[myId].gridID = gridIndexFlatten;
    }
}
