#version 450

float M_PI = 3.1415;

float defaultKernel(in vec4 position, in float positionNorm, in float supportRadius){
    if(positionNorm >= 0.0f && positionNorm <= supportRadius)
        return (315/(64 * M_PI * pow(supportRadius, 9))) * pow(pow(supportRadius, 2) - pow(positionNorm, 2), 3);
    else
        return 0.0f;
}

layout(push_constant) uniform Info{
    vec4 gravityForce;
    float particleMass;
    float restDensity;
    float viscosityCoefficient;
    float gasStiffnessConstant;
    float timeStep;
    float supportRadius;
    float tensionThreshold;
    float tensionCoefficient;
    uint particleCount;
} simulationInfo;

struct ParticleRecord {
    vec4 position;
    vec4 velocity;
    vec4 currentVelocity;
    float massDensity;
    float pressure;
        vec2 dummy;
};


layout(std430, binding = 0) buffer positionBuffer{
    ParticleRecord particleRecords[];
};

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
    if (gl_GlobalInvocationID.x < simulationInfo.particleCount){
        //Compute mass-density
        float massDensity = 0.0f;
        for (int i = 0; i < simulationInfo.particleCount; ++i){
                vec4 positionDiff = particleRecords[gl_GlobalInvocationID.x].position - particleRecords[i].position;
                if(gl_GlobalInvocationID.x != i)
                    massDensity += simulationInfo.particleMass * defaultKernel(positionDiff, length(positionDiff), simulationInfo.supportRadius);
        }

        particleRecords[gl_GlobalInvocationID.x].massDensity = massDensity;
        particleRecords[gl_GlobalInvocationID.x].pressure = simulationInfo.gasStiffnessConstant * (massDensity - simulationInfo.restDensity);
    }
}
