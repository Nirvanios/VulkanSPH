#version 450

#extension GL_EXT_debug_printf : enable

float M_PI = 3.1415;

int count = 0;

float defaultKernel(in vec4 position, in float positionNorm, in float supportRadius) {
  ++count;
  if (positionNorm >= 0.0f && positionNorm <= supportRadius) {
    return (315 / (64 * M_PI * pow(supportRadius, 9)))
        * pow(pow(supportRadius, 2) - pow(positionNorm, 2), 3);
  } else
    return 0.0f;
}

layout(push_constant) uniform Info {
  ivec4 gridSizeXYZcountW;
  vec4 GridOrigin;
  vec4 gravityForce;
  float particleMass;
  float restDensity;
  float viscosityCoefficient;
  float gasStiffnessConstant;
  float timeStep;
  float supportRadius;
  float tensionThreshold;
  float tensionCoefficient;
  uint particleCount;
}
simulationInfo;

struct ParticleRecord {
  vec4 position;
  vec4 velocity;
  vec4 previousVelocity;
  float massDensity;
  float pressure;
  int gridID;
  float pressureForceLength;
};

#define WALL_DAMPING 0.3f

#define gridSize simulationInfo.gridSizeXYZcountW.xyz
#define cellCount simulationInfo.gridSizeXYZcountW.w

layout(std430, binding = 0) buffer positionBuffer { ParticleRecord particleRecords[]; };

struct KeyValue {
  int key;  //Particle ID
  int value;//Cell ID
};

layout(std430, binding = 1) buffer Grid { KeyValue grid[]; };
layout(std430, binding = 2) buffer Indexes { int indexes[]; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
  const uint myId = gl_GlobalInvocationID.x;
  if (myId < simulationInfo.particleCount) {
    int myGridID = particleRecords[myId].gridID;
    int myGridIDxy = myGridID - ((myGridID / (gridSize.x * gridSize.y)) * gridSize.x * gridSize.y);
    ivec3 myGridID3D = ivec3(myGridIDxy % gridSize.x, myGridIDxy / gridSize.x,
                             myGridID / (gridSize.x * gridSize.y));
    //Compute mass-density
    float massDensity = 0.0f;

#if defined(GRID)
    //for (int i = 0; i < 27; ++i) {
    for (int z = -1; z < 2; ++z) {
      if (myGridID3D.z + z < 0 || myGridID3D.z + z > gridSize.z) continue;
      for (int y = -1; y < 2; ++y) {
        if (myGridID3D.y + y < 0 || myGridID3D.y + y > gridSize.y) {
          /* if (myId == 48)
            debugPrintfEXT("myGridID: %d y: %d gridID3d: %v3d", myGridID, y, myGridID3D); */
          continue;
        }
        for (int x = -1; x < 2; ++x) {
          if (myGridID3D.x + x < 0 || myGridID3D.x + x > gridSize.x - 1) continue;
          int currentGridID = myGridID + x + gridSize.x * (y + gridSize.y * z);
          if (currentGridID < 0 || currentGridID > cellCount) continue;
          int sortedID = indexes[currentGridID];
          if (sortedID == -1) { continue; }

          /*          if (myId == 0)
            debugPrintfEXT(
                "gridID: %d sortedID: %d myGridID: %d xyz: %v3d grid[sortedID].value: %d",
                currentGridID, sortedID, myId, ivec3(x, y, z), grid[sortedID].value);*/

          while (grid[sortedID].value == currentGridID && sortedID < simulationInfo.particleCount) {
            /*             if (myId == 0 && currentGridID == 21)
              debugPrintfEXT(
                  "gridID: %d sortedID: %d myGridID: %d xyz: %v3d grid[sortedID].value: %d",
                  currentGridID, sortedID, myId, ivec3(x, y, z), grid[sortedID].value);
 */
            const int neighbourID = grid[sortedID].key;
            if (myId != neighbourID) {
              vec4 positionDiff =
                  particleRecords[myId].position - particleRecords[neighbourID].position;
              massDensity += simulationInfo.particleMass
                  * defaultKernel(positionDiff, length(positionDiff), simulationInfo.supportRadius);
            }
            /* if (myId == 2) {
              tmp[i] = sortedID;
              ++i;
            } */
            ++sortedID;
          }
          /*           if (myId == 2)
            for (int i = 0; i < 16; ++i) { /*debugPrintfEXT("%d | sortedIDs: %d", i, tmp[i]); */
          /*}
          i = 0; */
          //tmp = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
        }
      }
    }
#else
    count *= -1;
    float massDensity2 = 0;
    for (int i = 0; i < simulationInfo.particleCount; ++i) {
      vec4 positionDiff =
          particleRecords[gl_GlobalInvocationID.x].position - particleRecords[i].position;
      if (gl_GlobalInvocationID.x != i)
        massDensity += simulationInfo.particleMass
            * defaultKernel(positionDiff, length(positionDiff), simulationInfo.supportRadius);
    }
#endif

    particleRecords[myId].massDensity = massDensity;

    particleRecords[myId].pressure =
        simulationInfo.gasStiffnessConstant * (massDensity - simulationInfo.restDensity);
    //debugPrintfEXT("ID %d particle pressure: %f massDensity: %f", myId, particleRecords[myId].pressure, massDensity);
  }
}
