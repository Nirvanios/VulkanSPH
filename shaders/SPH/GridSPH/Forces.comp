#version 450

float M_PI = 3.1415;

float defaultKernel(in vec4 position, in float positionNorm, in float supportRadius){
    if (positionNorm >= 0.0f && positionNorm <= supportRadius)
        return (315/(64 * M_PI * pow(supportRadius, 9))) * pow(pow(supportRadius, 2) - pow(positionNorm, 2), 3);
    else
        return 0.0f;
}
vec4 gradientKernel(in vec4 position, in float positionNorm, in float supportRadius){
    return -945/(32 * M_PI * pow(supportRadius, 9)) * position * pow(pow(supportRadius, 2) - pow(positionNorm, 2), 2);
}
float laplacianKernel(in vec4 position, in float positionNorm, in float supportRadius){
    return -945/(32 * M_PI * pow(supportRadius, 9)) * (pow(supportRadius, 2) - pow(positionNorm, 2)) * (3 * pow(supportRadius, 2) - 7 * pow(positionNorm, 2));
}
vec4 spikyGradientKernel(in vec4 position, in float positionNorm, in float supportRadius){
    return -45/(M_PI * pow(supportRadius, 6)) * (position / positionNorm) * pow(supportRadius - positionNorm, 2);
}
float viscosityLaplacianKernel(in vec4 position, in float positionNorm, in float supportRadius){
    return 45/(M_PI * pow(supportRadius, 6)) * (supportRadius - positionNorm);
}

layout(push_constant) uniform Info{
    vec4 gravityForce;
    float particleMass;
    float restDensity;
    float viscosityCoefficient;
    float gasStiffnessConstant;
    float timeStep;
    float supportRadius;
    float tensionThreshold;
    float tensionCoefficient;
    uint particleCount;
} simulationInfo;

struct ParticleRecord {
    vec4 position;
    vec4 velocity;
    vec4 previousVelocity;
    float massDensity;
    float pressure;
    vec2 dummy;
};

#define WALL_DAMPING 0.3f

layout(std430, binding = 0) buffer positionBuffer{
    ParticleRecord particleRecords[];
};

layout(binding = 1) uniform NeighbourOffsets{
    int neighbourOffsets [26];
};

struct KeyValue{
    int key;    //Particle ID
    int value;  //Cell ID
};

layout(std430, binding = 1) buffer Grid{
    KeyValue grid[];
};
layout(std430, binding = 3) buffer Indexes{
    int indexes[];
};

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
    if (gl_GlobalInvocationID.x < simulationInfo.particleCount){
        /**
        * INTERNAL FORCES
        */

        //Compute pressure, viscosity force
        vec4 pressureForce = vec4(0.0f);
        vec4 viscosityForce = vec4(0.0f);
        float colorField = 0.0f;
        vec4 inwardSurfaceNormal = vec4(0.0f);
        for (int i = 0; i < simulationInfo.particleCount; ++i){
            vec4 positionDiff = particleRecords[gl_GlobalInvocationID.x].position - particleRecords[i].position;
            if (i != gl_GlobalInvocationID.x && length(positionDiff) < simulationInfo.supportRadius){
                pressureForce -= simulationInfo.particleMass * (particleRecords[gl_GlobalInvocationID.x].pressure + particleRecords[i].pressure) / (2.f * particleRecords[i].massDensity) * spikyGradientKernel(positionDiff, length(positionDiff), simulationInfo.supportRadius);
                viscosityForce += (particleRecords[i].velocity - particleRecords[gl_GlobalInvocationID.x].velocity) * (simulationInfo.particleMass / particleRecords[i].massDensity) * viscosityLaplacianKernel(positionDiff, length(positionDiff), simulationInfo.supportRadius);
                colorField += (simulationInfo.particleMass / particleRecords[i].massDensity) * laplacianKernel(positionDiff, length(positionDiff), simulationInfo.supportRadius);
                inwardSurfaceNormal += (simulationInfo.particleMass / particleRecords[i].massDensity) * gradientKernel(positionDiff, length(positionDiff), simulationInfo.supportRadius);
            }
        }

        viscosityForce *= simulationInfo.viscosityCoefficient;
        vec4 internalForces = pressureForce + viscosityForce;

        /**
        * EXTERNAL FORCES
        */
        vec4 surfaceForce = vec4(0.0f);
        if (length(inwardSurfaceNormal) < simulationInfo.tensionThreshold){
            surfaceForce = -simulationInfo.tensionCoefficient * colorField * (inwardSurfaceNormal / length(inwardSurfaceNormal));
        }
        vec4 externalForces = simulationInfo.gravityForce * particleRecords[gl_GlobalInvocationID.x].massDensity + surfaceForce;


        /**
        * TIME INTEGRATION
        */
        vec4 force = internalForces + externalForces;

        vec4 acceleration = force / particleRecords[gl_GlobalInvocationID.x].massDensity;

        vec4 newVelocity = particleRecords[gl_GlobalInvocationID.x].previousVelocity + acceleration * simulationInfo.timeStep;

        vec4 newPosition = particleRecords[gl_GlobalInvocationID.x].position + newVelocity * simulationInfo.timeStep;
        newVelocity = (particleRecords[gl_GlobalInvocationID.x].velocity + newVelocity) / 2.0;

        if (newPosition.x < -0.001)
        {
            newPosition.x = -0.001;
            newVelocity.x *= -1 * WALL_DAMPING;
        }
        if (newPosition.x > 0.35)
        {
            newPosition.x = 0.35;
            newVelocity.x *= -1 * WALL_DAMPING;
        }
        if (newPosition.y < -0.5)
        {
            newPosition.y = -0.5;
            newVelocity.y *= -1 * WALL_DAMPING;
        }
        if (newPosition.y > 1)
        {
            newPosition.y = 1;
            newVelocity.y *= -1 * WALL_DAMPING;
        }
        if (newPosition.z < -0.001)
        {
            newPosition.z = -0.001;
            newVelocity.z *= -1 * WALL_DAMPING;
        }
        if (newPosition.z > 0.35)
        {
            newPosition.z = 0.35;
            newVelocity.z *= -1 * WALL_DAMPING;
        }

        particleRecords[gl_GlobalInvocationID.x].velocity = (newVelocity + particleRecords[gl_GlobalInvocationID.x].velocity) / 2;
        particleRecords[gl_GlobalInvocationID.x].previousVelocity = newVelocity;
        particleRecords[gl_GlobalInvocationID.x].position = newPosition;

    }
}
