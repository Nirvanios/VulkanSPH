#version 460

#extension GL_EXT_debug_printf : enable

#define TO_INDEX(a, b, c) (int(a + simulationInfo.gridSize.x * (b + simulationInfo.gridSize.y * c)))
#define TO_INDEX_BOUNDARY(a, b, c)                                                                 \
  (int(a + (simulationInfo.gridSize.x + 2) * (b + (simulationInfo.gridSize.y + 2) * c)))

#define VEC_TO_INDEX(a) (TO_INDEX(a.x, a.y, a.z))
#define VEC_TO_INDEX_BOUNDARY(a) (TO_INDEX_BOUNDARY(a.x, a.y, a.z))

layout(push_constant) uniform GridSimulationInfoUniform {
  ivec4 gridSize;
  vec4 gridOrigin;
  float timeStep;
  int cellCount;
  float cellSize;
  float diffusionCoefficient;
  int boundaryScale;
  uint specificInfo;
  float heatConductivity;
  float heatCapacity;
  float specificGasConstant;
}
simulationInfo;

layout(std430, binding = 0) buffer velocityBuffer { vec4 velocityField[]; };

layout(std430, binding = 1) buffer divergenceBuffer { float divergenceField[]; };

layout(std430, binding = 2) buffer pressureBuffer { float pressureField[]; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
  const ivec3 gridSizeWithBorders = simulationInfo.gridSize.xyz + ivec3(2);
  const ivec3 myId3D =
      ivec3(gl_GlobalInvocationID.x % simulationInfo.gridSize.x,
            int(gl_GlobalInvocationID.x % (simulationInfo.gridSize.x * simulationInfo.gridSize.y)
                / simulationInfo.gridSize.x),
            int(gl_GlobalInvocationID.x / (simulationInfo.gridSize.x * simulationInfo.gridSize.y)));
  const uint myId = (myId3D.x + 1) + (myId3D.y + 1) * gridSizeWithBorders.x
      + (myId3D.z + 1) * gridSizeWithBorders.x * gridSizeWithBorders.y;
  const vec3 h = 1.0 / vec3(simulationInfo.gridSize.xyz);

  if (all(lessThan(myId3D, simulationInfo.gridSize.xyz))) {

    divergenceField[myId] = -(1.0 / 3.0)
        * (h.x
               * (velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(1, 0, 0))].x
                  - velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(1, 0, 0))].x)
           + h.y
               * (velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))].y
                  - velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))].y)
           + h.z
               * (velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(0, 0, 1))].z
                  - velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(0, 0, 1))].z));

    /*         divergenceField[myId] = -(1.0/3.0) * (
                ((velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(1, 0, 0))].x
                  - velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(1, 0, 0))].x)) / simulationInfo.gridSize.x 
                  + (velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))].y
                  - velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))].y) / simulationInfo.gridSize.y 
                  + (velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(0, 0, 1))].z
                  - velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(0, 0, 1))].z) / simulationInfo.gridSize.z); */

    /*     if (myId == 57) {
      debugPrintfEXT("myId: %d, h: %.3v3f, velocityField %.3v4f, divergenceField: %f", myId, h,
                     velocityField[myId], divergenceField[gl_GlobalInvocationID.x]);
      debugPrintfEXT("myId: %d, velocityFieldUpID %.3v3f,velocityFieldDownID %.3v3f", myId,
                     velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))],
                     velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))]);
    } */

    /*     debugPrintfEXT("invID: %d, myId: %d, partialResult: %f", gl_GlobalInvocationID.x, myId,
                   divergenceField[myId]);
    if (divergenceField[myId] > 0)
      debugPrintfEXT("invID: %d, myId: %d, up: %f, down: %f", gl_GlobalInvocationID.x, myId,
                     velocityField[myId + VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))].y,
                     velocityField[myId - VEC_TO_INDEX_BOUNDARY(vec3(0, 1, 0))].y); */
    pressureField[myId] = 0.0f;
  }
}