#version 450

#define TO_INDEX(a, b, c) (int(a + simulationInfo.gridSize.x * (b + simulationInfo.gridSize.y * c)))

#define VEC_TO_INDEX(a) (TO_INDEX(a.x, a.y, a.z))

layout(push_constant) uniform GridSimulationInfoUniform {
  float timeStep;
  int cellCount;
  ivec4 gridSize;
  float diffusionCoefficient;
}
simulationInfo;

layout(std430, binding = 0) buffer velocityBufferNew { vec4 velocityFieldNew[]; };

layout(std430, binding = 1) buffer velocityBufferOld { vec4 velocityFieldOld[]; };

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

void main() {
  const vec3 myGridId = vec3(1) + gl_GlobalInvocationID * 2;
  if (all(lessThan(myGridId, simulationInfo.gridSize.xyz))) {
    const int myGridIdFlatten = (VEC_TO_INDEX(myGridId));
    const float a = simulationInfo.timeStep * simulationInfo.diffusionCoefficient
        * (simulationInfo.gridSize.x * simulationInfo.gridSize.y * simulationInfo.gridSize.z);

    velocityFieldNew[myGridIdFlatten] =
        (velocityFieldOld[myGridIdFlatten]
         + a
             * (velocityFieldNew[VEC_TO_INDEX(myGridId - vec3(1, 0, 0))]
                + velocityFieldNew[VEC_TO_INDEX(myGridId + vec3(1, 0, 0))]
                + velocityFieldNew[VEC_TO_INDEX(myGridId - vec3(0, 1, 0))]
                + velocityFieldNew[VEC_TO_INDEX(myGridId + vec3(0, 1, 0))]
                + velocityFieldNew[VEC_TO_INDEX(myGridId - vec3(0, 0, 1))]
                + velocityFieldNew[VEC_TO_INDEX(myGridId + vec3(0, 0, 1))])) / (1+a);
  }
}