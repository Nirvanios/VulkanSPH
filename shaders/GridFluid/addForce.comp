#version 460

#extension GL_EXT_debug_printf : enable

layout(push_constant) uniform GridSimulationInfoUniform {
  ivec4 gridSize;
  vec4 gridOrigin;
  float timeStep;
  int cellCount;
  float cellSize;
  float diffusionCoefficient;
  int boundaryScale;
  uint specificInfo;
  float heatConductivity;
  float heatCapacity;
  float specificGasConstant;
  float ambientTemperature;
  float buoyancyAlpha;
  float buoyancyBeta;
}
simulationInfo;

#ifndef TYPENAME_T
#define TYPENAME_T vec4
#endif

layout(std430, binding = 0) buffer velocityBuffer { TYPENAME_T velocityField[]; };

layout(std430, binding = 1) buffer forceBuffer { TYPENAME_T forceField[]; };

#if defined(TYPE_VEC4)
layout(std430, binding = 2) buffer gridDensityHeatBuffer { vec2 densityHeatBuffer[]; };
#endif

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
  const uint myId = gl_GlobalInvocationID.x;
  const ivec3 gridSizeWithBorders = simulationInfo.gridSize.xyz + ivec3(2);
  const ivec3 myId3D = ivec3(myId % simulationInfo.gridSize.x,
                             int(myId % (simulationInfo.gridSize.x * simulationInfo.gridSize.y)
                                 / simulationInfo.gridSize.x),
                             int(myId / (simulationInfo.gridSize.x * simulationInfo.gridSize.y)));
  const uint myIdBorder = (myId3D.x + 1) + (myId3D.y + 1) * gridSizeWithBorders.x
      + (myId3D.z + 1) * gridSizeWithBorders.x * gridSizeWithBorders.y;

  if (all(lessThan(myId3D, simulationInfo.gridSize.xyz))) {
    velocityField[myIdBorder] += forceField[myId];
#if defined(TYPE_VEC4)
    velocityField[myIdBorder] +=
        ((simulationInfo.buoyancyAlpha * densityHeatBuffer[myIdBorder].x
          + simulationInfo.buoyancyBeta
              * (densityHeatBuffer[myIdBorder].y - simulationInfo.ambientTemperature))
         * vec4(0, 1, 0, 0));
#endif
  }
}