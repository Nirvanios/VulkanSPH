#version 450

#extension GL_EXT_debug_printf : enable

layout(push_constant) uniform GridSimulationInfoUniform {
  ivec4 gridSize;
  vec4 gridOrigin;
  float timeStep;
  int cellCount;
  float cellSize;
  float diffusionCoefficient;
  int boundaryScale;
  uint specificInfo;
  float heatConductivity;
  float heatCapacity;
  float specificGasConstant;
}
simulationInfo;

#ifndef TYPENAME_T
#define TYPENAME_T vec4
#endif

const float alpha = 9.8;
const float beta = 0.1;

const float ambientTemperature = 50;

layout(std430, binding = 0) buffer velocityBuffer { TYPENAME_T velocityField[]; };

layout(std430, binding = 1) buffer forceBuffer { TYPENAME_T forceField[]; };

#if defined(TYPE_VEC4)
  layout(std430, binding = 2) buffer gridDensityHeatBuffer { vec2 densityHeatBuffer[]; };
#endif

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
  const ivec3 gridSizeWithBorders = simulationInfo.gridSize.xyz + ivec3(2);
  const ivec3 myId3D =
      ivec3(gl_GlobalInvocationID.x % simulationInfo.gridSize.x,
            int(gl_GlobalInvocationID.x % (simulationInfo.gridSize.x * simulationInfo.gridSize.y)
                / simulationInfo.gridSize.x),
            int(gl_GlobalInvocationID.x / (simulationInfo.gridSize.x * simulationInfo.gridSize.y)));
  const uint myId = (myId3D.x + 1) + (myId3D.y + 1) * gridSizeWithBorders.x
      + (myId3D.z + 1) * gridSizeWithBorders.x * gridSizeWithBorders.y;

  if (all(lessThan(myId3D, simulationInfo.gridSize.xyz))) {
    velocityField[myId] += forceField[gl_GlobalInvocationID.x];
    #if defined(TYPE_VEC4)
      velocityField[myId] += ((alpha * densityHeatBuffer[myId].x + beta * (densityHeatBuffer[myId].y - ambientTemperature)) * vec4(0,1,0,0));
    #endif
  }
}